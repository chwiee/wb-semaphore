trigger: none

variables: 
  - group: SEMAPHORE-UI

pool:
  name: wblocal 

stages:
- stage: changes
  displayName: 'Get changes'
  jobs:
  - job: changeJob
    displayName: 'Get changes'
    steps:
    - script: |
        git config --global credential.helper '!f() { echo "username=$GITHUB_USERNAME"; echo "password=$GITHUB_TOKEN"; }; f'
        git fetch origin main --unshallow || git fetch origin main

        MODIFIED_FILES=()
        while IFS= read -r line; do
          MODIFIED_FILES+=("$line")
        done < <(git diff --name-only origin/main...HEAD)

        project=""
        keys_files=""
        ansible_files=""
        terraform_files=""
        inventory_files=""

        for i in "${MODIFIED_FILES[@]}"; do
          [[ -e "$i" ]] || continue
          [[ "$i" == .* || "$i" == */.* ]] && continue

          IFS='/' read -r root resource item <<< "$i"

          project="$root"

          case "$resource" in
            ansible)
              ansible_files+="${item},"
              ;;
            keys)
              keys_files+="${item},"
              ;;
            terraform)
              terraform_files+="${item},"
              ;;
          esac
        done

        # Remover última vírgula
        ansible_files="${ansible_files%,}"
        keys_files="${keys_files%,}"
        terraform_files="${terraform_files%,}"

        echo "##vso[task.setvariable variable=PROJECT;isOutput=true]$project"
        echo "##vso[task.setvariable variable=KEYS;isOutput=true]$keys_files"
        echo "##vso[task.setvariable variable=ANSIBLE;isOutput=true]$ansible_files"
        echo "##vso[task.setvariable variable=TERRAFORM;isOutput=true]$terraform_files"
      name: set_variable
      displayName: 'Get modified roots'
      env:
        GITHUB_USERNAME: $(GITHUB_USERNAME)
        GITHUB_TOKEN: $(GITHUB_TOKEN)



# - stage: Teste
#   displayName: '🔎 Usar Variáveis'
#   dependsOn: changes
#   jobs:
#   - job: consumir
#     displayName: '📥 Consumir variáveis exportadas'
#     variables:
#       PROJECTS: $[ stageDependencies.changes.changeJob.outputs['set_variable.PROJECT'] ]
#       KEYS: $[ stageDependencies.changes.changeJob.outputs['set_variable.KEYS'] ]
#       ANSIBLE: $[ stageDependencies.changes.changeJob.outputs['set_variable.ANSIBLE'] ]
#       TERRAFORM: $[ stageDependencies.changes.changeJob.outputs['set_variable.TERRAFORM'] ]
#     steps:
#     - script: |
#         echo "📦 Projeto: $PROJECTS"
#         echo "🔑 Keys: $KEYS"
#         echo "📜 Ansible: $ANSIBLE"
#         echo "🌐 Terraform: $TERRAFORM"
#       displayName: 'Mostrar variáveis'



- stage: project
  displayName: 'Project'
  dependsOn: changes
  jobs:
  - job: projectJob
    displayName: 'Validating job'
    variables:
      PROJECT: $[ stageDependencies.changes.changeJob.outputs['set_variable.PROJECT'] ]  
    steps:
    - script: |
        PROJECT_ID=$(curl "$SEMAPHORE_URL/projects" \
                      -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"$PROJECT\") | .id")

        if [[ -z $PROJECT_ID ]]; then
          PROJECT_ID=$(curl -s -XPOST "$SEMAPHORE_URL/projects" \
                      -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
                      -H "Content-Type: application/json" \
                      -d "{\"name\": \"$PROJECT\", \"alert\": false}" | jq -r '.id')                
        fi        
        echo "##vso[task.setvariable variable=PROJECT_ID;isOutput=true]$PROJECT_ID"
      name: set_variable
      displayName: 'Get project id'
      env:
        SEMAPHORE_URL: $(SEMAPHORE_URL)
        SEMAPHORE_TOKEN: $(SEMAPHORE_TOKEN)



- stage: keys
  displayName: 'Keys'
  dependsOn: 
    - project
    - changes
  jobs:
  - job: repositoryKeyJob
    displayName: 'Repository Key'
    variables:
      PROJECT_ID: $[ stageDependencies.project.projectJob.outputs['set_variable.PROJECT_ID'] ]
    steps:
    - task: DownloadSecureFile@1
      displayName: 'Get default repositorykey'
      name: caCertificate
      inputs:
        secureFile: 'id_ed25519'
    - script: |
        KEY_ID=$(curl -X "GET" \
                "$SEMAPHORE_URL/project/$PROJECT_ID/keys?Key%20type=none&sort=type&order=asc" \
                -H 'accept: application/json' \
                -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"RepositoryKey\") | .id")

        if [[ -z $KEY_ID ]]; then
          jq -n --arg private_key "$(cat $(caCertificate.secureFilePath))" --argjson project_id $PROJECT_ID \
          '{ 
            name: "RepositoryKey",
            type: "ssh",
            override_secret: true,
            project_id: $project_id,
            ssh: {
              "login": "user",
              "private_key": $private_key
            }
          }' > payload.json

          KEY_ID=$(curl -X "POST" \
                "$SEMAPHORE_URL/project/$PROJECT_ID/keys" \
                -H "accept: application/json" \
                -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
                -d @payload.json | jq -r ".[] | .id")
          
        fi
        echo "Key: $KEY_ID"
        echo "##vso[task.setvariable variable=REPOSITORYKEY;isOutput=true]$KEY_ID"
      displayName: 'RepositoryKey'
      env:
        SEMAPHORE_URL: $(SEMAPHORE_URL)
        SEMAPHORE_TOKEN: $(SEMAPHORE_TOKEN)


  - job: keysJob
    displayName: 'Another Keys'
    variables:
      KEYS: $[ stageDependencies.changes.changeJob.outputs['set_variable.KEYS'] ]
      PROJECT_ID: $[ stageDependencies.project.projectJob.outputs['set_variable.PROJECT_ID'] ]

    steps:
    - script: |
        keys_ids=""
        IFS=',' read -ra KEYS_ARRAY <<< "$KEYS"
        for KEY in "${KEYS_ARRAY[@]}"; do
          jq -n --arg private_key "123456" --argjson project_id $PROJECT_ID --arg key_name $KEY \
          '{ 
            name: $key_name,
            type: "ssh",
            override_secret: true,
            project_id: $project_id,
            ssh: {
              "login": "user",
              "private_key": $private_key
            }
          }' > payload.json

          KEY_ID=$(curl -X "POST" \
                "$SEMAPHORE_URL/project/$PROJECT_ID/keys" \
                -H "accept: application/json" \
                -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
                -d @payload.json | jq -r ".id")

          keys_ids+="${KEY_ID},"
        done

        echo $keys_ids
      displayName: 'Creating keys'
      env:
        SEMAPHORE_URL: $(SEMAPHORE_URL)
        SEMAPHORE_TOKEN: $(SEMAPHORE_TOKEN)



- stage: repository
  displayName: 'Repository'
  dependsOn: 
    - project
    - keys
  jobs:
  - job: repositoryJob
    displayName: 'Add github repository'
    variables:
      PROJECT_ID: $[ stageDependencies.project.projectJob.outputs['set_variable.PROJECT_ID'] ]
      REPOSITORYKEY: $[ stageDependencies.keys.repositoryKeyJob.outputs['set_variable.REPOSITORYKEY'] ]
    steps:
    - script: |
        REPO_ID=$(curl -X "GET" \
                "$SEMAPHORE_URL/project/$PROJECT_ID/repositories?sort=name&order=asc" \
                -H 'accept: application/json' \
                -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"ansible\") | .id")

        if [[ -z $REPO_ID ]]; then
          REPO_ID=$(curl -X 'POST' \
                    "$SEMAPHORE_URL/project/$PROJECT_ID/repositories" \
                    -H 'accept: application/json' \
                    -H 'Content-Type: application/json' \
                    -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
                    -d '{
                      "name": "ansible",
                      "project_id": $PROJECT_ID,
                      "git_url": "git@github.com/chwiee/ansible.git",
                      "git_branch": "main",
                      "ssh_key_id": $REPOSITORYKEY }' | jq -r ".[] | .id")
                            
        fi
        echo "Ansible Repo: $REPO_ID"
        echo "##vso[task.setvariable variable=ANSIBLE_REPO;isOutput=true]$REPO_ID"
      displayName: 'Github - Ansible'
      env:
        SEMAPHORE_URL: $(SEMAPHORE_URL)
        SEMAPHORE_TOKEN: $(SEMAPHORE_TOKEN)


    - script: |
        REPO_ID=$(curl -X "GET" \
                "$SEMAPHORE_URL/project/$PROJECT_ID/repositories?sort=name&order=asc" \
                -H 'accept: application/json' \
                -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"terraform\") | .id")

        if [[ -z $REPO_ID ]]; then
          REPO_ID=$(curl -X 'POST' \
                    "$SEMAPHORE_URL/project/$PROJECT_ID/repositories" \
                    -H 'accept: application/json' \
                    -H 'Content-Type: application/json' \
                    -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
                    -d '{
                    -d '{
                      "name": "terraform",
                      "project_id": $PROJECT_ID,
                      "git_url": "git@github.com/chwiee/terraform.git",
                      "git_branch": "main",
                      "ssh_key_id": $REPOSITORYKEY }' | jq -r ".[] | .id")                        
                fi
                echo "Terraform Repo: $REPO_ID"
                echo "##vso[task.setvariable variable=TERRAFORM_REPO;isOutput=true]$REPO_ID"
      displayName: 'Github - Terraform'
      env:
        SEMAPHORE_URL: $(SEMAPHORE_URL)
        SEMAPHORE_TOKEN: $(SEMAPHORE_TOKEN)



- stage: iventory
  displayName: 'Inventory'
  dependsOn: 
    - project
    - keys
    - repository
  jobs:
  - job: InventoryJob
    displayName: 'Iventory'
    variables:
      PROJECT_ID: $[ stageDependencies.project.projectJob.outputs['set_variable.PROJECT_ID'] ]
      REPOSITORYKEY: $[ stageDependencies.keys.repositoryKeyJob.outputs['set_variable.REPOSITORYKEY'] ]
    steps:
    - script: |
        REPO_ID=$(curl -X "GET" \
                "$SEMAPHORE_URL/project/$PROJECT_ID/repositories?sort=name&order=asc" \
                -H 'accept: application/json' \
                -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"ansible\") | .id")

        if [[ -z $REPO_ID ]]; then
          REPO_ID=$(curl -X 'POST' \
                     "$SEMAPHORE_URL/project/$PROJECT_ID/repositories' \
                    -H 'accept: application/json' \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "name": "ansible",
                      "project_id": $PROJECT_ID,
                      "git_url": "git@github.com/chwiee/ansible.git",
                      "git_branch": "main",
                      "ssh_key_id": $REPOSITORYKEY }' | jq -r ".[] | .id")
                            
        fi
        echo "Key: $REPO_ID"
        echo "##vso[task.setvariable variable=ANSIBLE_REPO;isOutput=true]$REPO_ID"
      displayName: 'Github - Ansible'
      env:
        SEMAPHORE_URL: $(SEMAPHORE_URL)
        SEMAPHORE_TOKEN: $(SEMAPHORE_TOKEN)