trigger: none

variables: 
  - group: SEMAPHORE-UI

pool:
  name: wblocal 

stages:

- stage: changes
  displayName: 'Get changes'
  jobs:
  - job: changeJob
    displayName: 'Get changes'
    steps:
    - script: |
        git config --global credential.helper '!f() { echo "username=$GITHUB_USERNAME"; echo "password=$GITHUB_TOKEN"}'
        git fetch origin main --unshallow || git fetch origin main
        MODIFIED_FILES=$(git diff --name-only origin/main...HEAD)

        declare -A MODIFIED_PROJECTS
        declare -A KEYS
        declare -A ANSIBLES
        declare -A TERRA

        while read -r FILE; do
          ROOT=$(echo "$FILE" | cut -d/ -f1)
          SUBDIR=$(echo "$FILE" | cut -d/ -f2)

          MODIFIED_PROJECTS["$ROOT"]=1

          case "$SUBDIR" in
            key)
              KEYS["$ROOT"]=1
              ;;
            ansible)
              ANSIBLES["$ROOT"]=1
              ;;
            terraform)
              TERRA["$ROOT"]=1
              ;;
          esac
        done <<< "$MODIFIED_FILES"

        to_csv() {
          local -n arr=$1
          (IFS=','; echo "${!arr[*]}")
        }

        KEYS_CSV=$(to_csv KEYS)
        ANSIBLES_CSV=$(to_csv ANSIBLES)
        TERRA_CSV=$(to_csv TERRA)
        PROJETOS_CSV=$(to_csv MODIFIED_PROJECTS)

        echo "##vso[task.setvariable variable=PROJECTS; isOutput=true]$PROJETOS_CSV"
        echo "##vso[task.setvariable variable=KEYS; isOutput=true]$KEYS_CSV"
        echo "##vso[task.setvariable variable=ANSIBLE; isOutput=true]$ANSIBLES_CSV"
        echo "##vso[task.setvariable variable=TERRAFORM;isOutput=true ]$TERRA_CSV"
      name: set_variable
      displayName: 'Get modified roots'
      env:
        GITHUB_USERNAME: $(GITHUB_USERNAME)
        GITHUB_TOKEN: $(GITHUB_TOKEN)

- stage:
  displayName: Teste
  dependsOn: changes
  jobs:
  - job:
    variables:
      PROJECTS: $[stageDependencies.changes.changeJob.outputs['set_variable.PROJECTS']]
      KEYS: $[stageDependencies.changes.changeJob.outputs['set_variable.KEYS']]
      ANSIBLE: $[stageDependencies.changes.changeJob.outputs['set_variable.ANSIBLE']]
      TERRAFORM: $[stageDependencies.changes.changeJob.outputs['set_variable.TERRAFORM']]
    steps:
      - script:
          echo $PROJECTS
          for key in ${KEYS[@]}; do
            print $key
          done

          for an in ${ANSIBLE[@]}; do
            print $an
          done

          for tf in $TERRAFORM[@]; do 
            print $tf
          done

# - stage: projects
#   displayName: 'Project'
#   dependsOn: changes
#   jobs:
#   - job: projectJob
#     displayName: 'Validating job'
#     variables:
#       PROJECT: $[stageDependencies.changes.changeJob.outputs['set_variable.MODIFIED_ROOTS']]
#     steps:
#     - script: |
#         PROJECT_ID=$(curl "$SEMAPHORE_URL/projects" \
#                       -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"PROJECT\") | .id")
#         if [[ -z $PROJECT ]]; then

#           PROJECT_ID=$(curl -s -XPOST "$SEMAPHORE_URL/projects" \
#                       -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
#                       -H "Content-Type: application/json" \
#                       -d "{ \
#                         \"name\": \"$PROJECT\", \
#                         \"alert\": false \                      
#                       }" | jq -r '.id')
        
#         echo "##vso[task.setvariable variable="PROJECT_ID/ isOutput=true]$PROJECT_ID]"
#       name: set_variable
#       displayName: 'Get project id'
#       env:
#         PROJECT_ID: $(PROJECT_ID)
#         SEMAPHORE_URL: $(SEMAPHORE_URL)
#         SEMAPHORE_TOKEN: $(SEMAPHORE_TOKEN)


# - stage: keys
#   displayName: 'Validating keys'
#   dependsOn: projects
#   jobs:
#   - job: keysJob
#     displayName: 'Keys job'
#     variables:
#       PROJECT_ID: $[stageDependencies.projects.projectJob.outputs['set_variable.PROJECT_ID']]
#     steps:
#     - task: DownloadSecureFile@1
#       displayName: 'Get default repositorykey'
#       inputs:
#         secureFile: 'RepositoryKey'

#     - script: |
#         KEYS_ID=$(curl "$SEMAPHORE_URL/projects" \
#                       -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"PROJECT\") | .id")
#         if [[ -z $PROJECT ]]; then

#           PROJECT_ID=$(curl -s -XPOST "$SEMAPHORE_URL/projects" \
#                       -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
#                       -H "Content-Type: application/json" \
#                       -d "{ \
#                         \"name\": \"$PROJECT\", \
#                         \"alert\": false \                      
#                       }" | jq -r '.id')
        
#         echo "##vso[task.setvariable variable="PROJECT_ID/ isOutput=true]$PROJECT_ID]"

# - stage: iventory

# - stage: repository