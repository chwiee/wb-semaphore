trigger:
  include:
    branch:
      - main

pr: none

variables: 
  - group: SEMAPHORE-UI

pool:
  - name: wblocal

stages:

- stage: changes
  displayName: 'Get changes'
  jobs:
  - job: changeJob
    displayName: 'Get changes from $(Build.SourceBranch)'
    steps:
    - script: |
        git config --global credentials.helper '!f() { echo "username=$GITHUB_USERNAME; echo "password=$GITHUB_TOKEN";}; f'
        git fetch origin/main
        ROOTS=$(git diff --name-only origin/$BASE_BRANCH...HEAD | awk -F/ '{print $1}' | sort -u)
        echo "##vso[task.setvariable variable="MODIFIED_ROOTS/ isOutput=true]$ROOTS]"
      name: set_variable
      displayName: 'Get modified roots'
      env:
        GITHUB_USERNAME: $(GITHUB_USERNAME)
        GITHUB_TOKEN: $(GITHUB_TOKEN)


- stage: projects
  displayName: 'Project'
  dependsOn: changes
  jobs:
  - job: projectJob
    displayName: 'Validating job'
    variables:
      PROJECT: $[stageDependencies.changes.changeJob.outputs['set_variable.MODIFIED_ROOTS']]
    steps:
    - script: |
        PROJECT_ID=$(curl "$SEMAPHORE_URL/projects" \
                      -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"PROJECT\") | .id")
        if [[ -z $PROJECT ]]; then

          PROJECT_ID=$(curl -s -XPOST "$SEMAPHORE_URL/projects" \
                      -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
                      -H "Content-Type: application/json" \
                      -d "{ \
                        \"name\": \"$PROJECT\", \
                        \"alert\": false \                      
                      }" | jq -r '.id')
        
        echo "##vso[task.setvariable variable="PROJECT_ID/ isOutput=true]$PROJECT_ID]"
      name: set_variable
      displayName: 'Get project id'
      env:
        PROJECT_ID: $(PROJECT_ID)
        SEMAPHORE_URL: $(SEMAPHORE_URL)
        SEMAPHORE_TOKEN: $(SEMAPHORE_TOKEN)


- stage: keys
  displayName: 'Validating keys'
  dependsOn: projects
  jobs:
  - job: keysJob
    displayName: 'Keys job'
    variables:
      PROJECT_ID: $[stageDependencies.projects.projectJob.outputs['set_variable.PROJECT_ID']]
    steps:
    - task: DownloadSecureFile@1
      displayName: 'Get default repositorykey'
      inputs:
        secureFile: 'RepositoryKey'

    - script: |
        KEYS_ID=$(curl "$SEMAPHORE_URL/projects" \
                      -H "Authorization: Bearer $SEMAPHORE_TOKEN" | jq -r ".[] | select(.name==\"PROJECT\") | .id")
        if [[ -z $PROJECT ]]; then

          PROJECT_ID=$(curl -s -XPOST "$SEMAPHORE_URL/projects" \
                      -H "Authorization: Bearer $SEMAPHORE_TOKEN" \
                      -H "Content-Type: application/json" \
                      -d "{ \
                        \"name\": \"$PROJECT\", \
                        \"alert\": false \                      
                      }" | jq -r '.id')
        
        echo "##vso[task.setvariable variable="PROJECT_ID/ isOutput=true]$PROJECT_ID]"

- stage: iventory

- stage: repository